{"version":3,"sources":["simplex.js","App.js","serviceWorker.js","index.js"],"names":["getLineObjectiveFunction","matriz","lineSize","columnToArray","columnIndex","map","line","columnSize","columnGetOffBase","lineObjectiveFunction","reduce","current","value","index","getColumnGetOffBase","lineEnterBase","indexColumnGetOffBase","matrizWithoutObjectiveFunctionLine","filter","length","removeObjectiveFunctionLine","columnResult","result","getLineEnterBase","pivot","indexLineEnterBase","getPivotValue","newLinePivot","indexLinePivot","createNewLinePivot","indexNewLine","newLine","createNewLine","every","some","TableInteractions","Box","mb","Typography","variant","Table","TableBody","TableRow","key","TableCell","toFixed","FormVariablesAndRestrictions","onSubmit","React","useState","objective","setObjective","handleClick","event","preventDefault","persist","data","FormData","target","variables","get","restrictions","interactions","TextField","type","name","label","required","fullWidth","display","width","mr","Button","color","size","onClick","FormFuncVariablesAndRestrictions","multiplier","objectiveFunction","Array","fill","parseFloat","matrizRestrictions","alignItems","ml","App","allMatriz","setAllMatriz","setMatriz","setLineSize","setColumnSize","setVariables","setRestrictions","setInteractions","impossible","setImpossible","flexDirection","justifyContent","p","align","maxWidth","component","Paper","parseInt","simplex","countInterations","push","shift","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4c35c838.chunk.js","sourcesContent":["const removeObjectiveFunctionLine = (matriz) =>\n  matriz.filter((line, index) => index < matriz.length - 1);\n\nconst getLineObjectiveFunction = (matriz, lineSize) => matriz[lineSize - 1];\n\nconst columnToArray = (matriz, columnIndex) =>\n  matriz.map((line) => line[columnIndex]);\n\nconst getColumnGetOffBase = (lineObjectiveFunction) =>\n  lineObjectiveFunction.reduce(\n    (current, value, index) => {\n      if (value < 0 && value < current.value) {\n        return { index, value };\n      }\n\n      return current;\n    },\n    { index: 0, value: 0 }\n  );\n\nconst getLineEnterBase = (matriz, indexColumnGetOffBase, columnSize) => {\n  const matrizWithoutObjectiveFunctionLine = removeObjectiveFunctionLine(\n    matriz\n  );\n  const columnResult = columnToArray(\n    matrizWithoutObjectiveFunctionLine,\n    columnSize - 1\n  );\n  const columnGetOffBase = columnToArray(\n    matrizWithoutObjectiveFunctionLine,\n    indexColumnGetOffBase\n  );\n\n  const result = columnResult.map(\n    (value, index) => value / columnGetOffBase[index]\n  );\n\n  return result.reduce(\n    (current, value, index) => {\n      if (value > 0 && value < current.value) {\n        return { index, value };\n      }\n\n      return current;\n    },\n    { index: 0, value: result[0] }\n  );\n};\n\nconst getPivotValue = (matriz, indexLineEnterBase, indexColumnGetOffBase) =>\n  matriz[indexLineEnterBase][indexColumnGetOffBase];\n\nconst createNewLinePivot = (matriz, indexLinePivot, pivot) =>\n  matriz[indexLinePivot].map((value) => value / pivot);\n\nconst createNewLine = (\n  matriz,\n  newLinePivot,\n  indexNewLine,\n  indexColumnGetOffBase\n) => {\n  const newLine = matriz[indexNewLine];\n  const pivot = matriz[indexNewLine][indexColumnGetOffBase] * -1;\n\n  return newLinePivot.map((value, index) => value * pivot + newLine[index]);\n};\n\nconst createNewMatriz = (matriz, lineSize, columnSize) => {\n  const lineObjectiveFunction = getLineObjectiveFunction(matriz, lineSize);\n  const columnGetOffBase = getColumnGetOffBase(lineObjectiveFunction);\n  const lineEnterBase = getLineEnterBase(\n    matriz,\n    columnGetOffBase.index,\n    columnSize\n  );\n  const pivot = getPivotValue(\n    matriz,\n    lineEnterBase.index,\n    columnGetOffBase.index\n  );\n  const newLinePivot = createNewLinePivot(matriz, lineEnterBase.index, pivot);\n\n  const newMatriz = matriz.map((line, index) => {\n    if (index === lineEnterBase.index) {\n      return newLinePivot;\n    }\n\n    return createNewLine(matriz, newLinePivot, index, columnGetOffBase.index);\n  });\n\n  return newMatriz;\n};\n\nconst stopConditionReached = (matriz, lineSize) => {\n  const lineObjectiveFunction = getLineObjectiveFunction(matriz, lineSize);\n\n  return lineObjectiveFunction.every((value) => value >= 0);\n};\n\nconst impossibleSolution = (matriz, columnSize) => {\n  return matriz.some((line) => line[columnSize - 1] < 0);\n};\n\nexport default { createNewMatriz, stopConditionReached, impossibleSolution };\n","import React from \"react\";\n\nimport \"typeface-roboto\";\n\nimport {\n  Box,\n  Paper,\n  TextField,\n  Typography,\n  Button,\n  Table,\n  TableBody,\n  TableRow,\n  TableCell,\n} from \"@material-ui/core\";\n\nimport simplex from \"./simplex\";\n\nconst TableInteractions = ({ matriz, index }) => {\n  return (\n    <Box mb={2}>\n      <Box mb={1}>\n        <Typography variant=\"h4\">Interação {index + 1}</Typography>\n      </Box>\n\n      <Table>\n        <TableBody>\n          {matriz.map((line, index) => (\n            <TableRow key={index}>\n              {line.map((value, index) => (\n                <TableCell key={index}>{value.toFixed(2)}</TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Box>\n  );\n};\n\nconst FormVariablesAndRestrictions = ({ onSubmit = () => {} }) => {\n  const [objective, setObjective] = React.useState();\n\n  const handleClick = (objective) => {\n    setObjective(objective);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    event.persist();\n\n    const data = new FormData(event.target);\n    const variables = data.get(\"variables\");\n    const restrictions = data.get(\"restrictions\");\n    const interactions = data.get(\"interactions\");\n\n    onSubmit({ variables, restrictions, interactions, objective });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Box mb={1}>\n        <Typography variant=\"h4\">Dados iniciais</Typography>\n      </Box>\n\n      <Box mb={1}>\n        <TextField\n          type=\"number\"\n          name=\"variables\"\n          label=\"Quantidade de variáveis\"\n          variant=\"outlined\"\n          required\n          fullWidth\n        />\n      </Box>\n\n      <Box mb={1}>\n        <TextField\n          type=\"number\"\n          name=\"restrictions\"\n          label=\"Quantidade de restrições\"\n          variant=\"outlined\"\n          required\n          fullWidth\n        />\n      </Box>\n\n      <Box mb={1}>\n        <TextField\n          type=\"number\"\n          name=\"interactions\"\n          label=\"Quantidade de interações\"\n          variant=\"outlined\"\n          required\n          fullWidth\n        />\n      </Box>\n\n      <Box display=\"flex\">\n        <Box width=\"100%\" mr={1}>\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            onClick={() => handleClick(\"max\")}\n            fullWidth\n          >\n            Maximizar\n          </Button>\n        </Box>\n\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          onClick={() => handleClick(\"min\")}\n          fullWidth\n        >\n          Minimizar\n        </Button>\n      </Box>\n    </form>\n  );\n};\n\nconst FormFuncVariablesAndRestrictions = ({\n  variables,\n  restrictions,\n  objective,\n  onSubmit,\n}) => {\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    event.persist();\n\n    const data = new FormData(event.target);\n    const multiplier = objective === \"max\" ? -1 : 1;\n\n    const objectiveFunction = Array(variables + restrictions + 1)\n      .fill()\n      .map((value, index) => {\n        if (index < variables) {\n          return parseFloat(data.get(`f[${index}]`)) * multiplier;\n        }\n\n        return 0;\n      });\n\n    const matrizRestrictions = Array(restrictions)\n      .fill()\n      .map((value, line) =>\n        Array(variables + restrictions + 1)\n          .fill()\n          .map((value, index) => {\n            if (index < variables) {\n              return parseFloat(data.get(`r[${line}][${index}]`));\n            }\n\n            if (index === variables + restrictions) {\n              return parseFloat(data.get(`r[${line}][${variables}]`));\n            }\n\n            if (index === variables + line) {\n              return 1;\n            }\n\n            return 0;\n          })\n      );\n\n    onSubmit([...matrizRestrictions, objectiveFunction]);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Box mb={1}>\n        <Typography variant=\"h4\">Função objetivo</Typography>\n      </Box>\n\n      <Box display=\"flex\" mb={1}>\n        {Array(variables)\n          .fill()\n          .map((value, index) => (\n            <Box mr={index < variables - 1 ? 1 : 0} key={`f[${index}]`}>\n              <TextField\n                name={`f[${index}]`}\n                label={`x${index + 1}`}\n                variant=\"outlined\"\n                required\n              />\n            </Box>\n          ))}\n      </Box>\n\n      <Box mb={1}>\n        <Typography variant=\"h4\">Restrições</Typography>\n      </Box>\n\n      {Array(restrictions)\n        .fill()\n        .map(() => Array(variables + 1).fill())\n        .map((variables, line) => (\n          <Box display=\"flex\" mb={1} key={`l${line}`}>\n            {variables.map((value, index) => {\n              if (index < variables.length - 1) {\n                return (\n                  <Box mr={1} key={`r[${line}][${index}]`}>\n                    <TextField\n                      name={`r[${line}][${index}]`}\n                      label={`x${index + 1}`}\n                      variant=\"outlined\"\n                      required\n                    />\n                  </Box>\n                );\n              }\n\n              return (\n                <Box\n                  display=\"flex\"\n                  alignItems=\"center\"\n                  key={`r[${line}][${index}]`}\n                >\n                  {\"<=\"}\n                  <Box ml={1}>\n                    <TextField\n                      name={`r[${line}][${index}]`}\n                      variant=\"outlined\"\n                      required\n                    />\n                  </Box>\n                </Box>\n              );\n            })}\n          </Box>\n        ))}\n\n      <Button\n        type=\"submit\"\n        variant=\"contained\"\n        color=\"primary\"\n        size=\"large\"\n        fullWidth\n      >\n        Passo a passo\n      </Button>\n    </form>\n  );\n};\n\nfunction App() {\n  const [allMatriz, setAllMatriz] = React.useState(null);\n  const [matriz, setMatriz] = React.useState(null);\n  const [lineSize, setLineSize] = React.useState(null);\n  const [columnSize, setColumnSize] = React.useState(null);\n  const [variables, setVariables] = React.useState(null);\n  const [restrictions, setRestrictions] = React.useState(null);\n  const [interactions, setInteractions] = React.useState(null);\n  const [objective, setObjective] = React.useState(null);\n  const [impossible, setImpossible] = React.useState(null);\n\n  const handleSubmitVariablesAndRestrictions = ({\n    variables,\n    restrictions,\n    interactions,\n    objective,\n  }) => {\n    const lineSize = parseInt(restrictions) + 1;\n    const columnSize = parseInt(variables) + parseInt(restrictions) + 1;\n\n    setVariables(parseInt(variables));\n    setRestrictions(parseInt(restrictions));\n    setInteractions(parseInt(interactions));\n    setObjective(objective);\n    setLineSize(lineSize);\n    setColumnSize(columnSize);\n  };\n\n  const handleSubmitFuncVariablesAndRestrictions = (matriz) => {\n    setMatriz(matriz);\n\n    const impossible = simplex.impossibleSolution(matriz, columnSize);\n\n    if (impossible) {\n      setImpossible(true);\n      return;\n    }\n\n    const allMatriz = [matriz];\n    let countInterations = 0;\n\n    do {\n      allMatriz.push(\n        simplex.createNewMatriz(\n          allMatriz[allMatriz.length - 1],\n          lineSize,\n          columnSize\n        )\n      );\n\n      countInterations++;\n    } while (\n      !simplex.stopConditionReached(\n        allMatriz[allMatriz.length - 1],\n        lineSize\n      ) &&\n      countInterations < interactions\n    );\n\n    allMatriz.shift();\n\n    setAllMatriz(allMatriz);\n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      p={2}\n    >\n      <Typography variant=\"h3\" align=\"center\">\n        SIMPLEX PO20\n      </Typography>\n\n      <Box width=\"100%\" maxWidth={600} p={2} component={Paper}>\n        {!variables && !restrictions && !objective && (\n          <FormVariablesAndRestrictions\n            onSubmit={handleSubmitVariablesAndRestrictions}\n          />\n        )}\n\n        {variables && restrictions && objective && !matriz && (\n          <FormFuncVariablesAndRestrictions\n            variables={variables}\n            restrictions={restrictions}\n            objective={objective}\n            onSubmit={handleSubmitFuncVariablesAndRestrictions}\n          />\n        )}\n\n        {impossible && (\n          <Typography variant=\"h5\" align=\"center\">\n            Solução impossível\n          </Typography>\n        )}\n\n        {allMatriz &&\n          allMatriz.map((matriz, index) => (\n            <TableInteractions matriz={matriz} index={index} key={index} />\n          ))}\n      </Box>\n    </Box>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}